{
    "metadata": {
        "kernelspec": {
            "language": "python",
            "display_name": "Python 3",
            "name": "python3"
        },
        "language_info": {
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "version": "3.6.4",
            "file_extension": ".py",
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "name": "python",
            "mimetype": "text/x-python"
        }
    },
    "nbformat_minor": 4,
    "nbformat": 4,
    "cells": [
        {
            "cell_type": "code",
            "source": "import numpy as np\nimport pandas as pd\nimport keras\n\nimport keras\nfrom keras.models import Model\nfrom keras.layers import Input,Dense\nfrom keras import Sequential\n\ntrain = pd.read_csv(\"../input/titanic/train.csv\")\ntest = pd.read_csv(\"../input/titanic/test.csv\")\n\ntrain.Pclass = train.Pclass.values.astype('str')\ntest.Pclass = test.Pclass.values.astype('str')\n\ntrain.SibSp = train.SibSp.values.astype('str')\ntest.SibSp = test.SibSp.values.astype('str')\n\ntrain.Parch = train.Parch.values.astype('str')\ntest.Parch = test.Parch.values.astype('str')\n\nuse_col =  ['Survived', 'Pclass', 'Sex', 'Age', 'SibSp','Parch','Fare', 'Embarked']\n\ntrain[\"Age\"] = train.Age.fillna(30.).values\ntest[\"Age\"] = test.Age.fillna(30.).values\n\ntest.Fare[152]=np.mean(test.Fare)\n\ntrain = train[use_col]\ntest_x = test[use_col[1:]]\n\ntrain = train.dropna()\n\ntrain_y = train[use_col[0]].values\ntrain_x = train[use_col[1:]].copy()",
            "metadata": {
                "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
                "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
                "trusted": true
            },
            "execution_count": null,
            "outputs": []
        },
        {
            "cell_type": "code",
            "source": "import numpy as np\nimport pandas as pd\n\ndef pandas_type(inp):\n    if str(type(inp)) != \"<class 'pandas.core.frame.DataFrame'>\":\n        print(\"Use pandas DataFrame\")\n        return False\n    else:\n        if np.any(inp.isnull()==True)==True:\n            print(\"Your data is a mess\")\n            return False\n        else:\n            pass\n    \ndef pandas_enc_str(inp,m_co_var=True):\n    out = pd.DataFrame()\n    zw = inp.astype\n    try:\n        zzw = zw.unique()\n    except:\n        zw = pd.Series(inp)\n        zzw = zw.unique()\n\n    if m_co_var == True:\n        for i in zzw[1:]:\n            try:\n                bin_ = eval('zw=='+str(i)).replace({True : 1 , False : 0})\n            except:\n                bin_ = eval('zw==\"'+str(i)+'\"').replace({True : 1 , False : 0})\n            out[i]=bin_\n        return out\n    else:\n        for i in zzw:\n            try:\n                bin_ = eval('zw=='+str(i)).replace({True : 1 , False : 0})\n            except:\n                bin_ = eval('zw==\"'+str(i)+'\"').replace({True : 1 , False : 0})\n            out[i]=bin_\n        return out\n    \ndef get_split_len(inp):\n    nn1 = str(np.float32(np.mean(inp))-min(inp)).split(\".\")[0]\n    nn2 = str(np.float32(min(inp))).split(\".\")[1]\n    if nn1 != \"0\":\n        return -len(nn1)+3\n    else:\n        return len(nn2)\n\ndef categorize_cat(inp,bins):\n    nn = get_split_len(inp)\n    leng = (max(inp)-min(inp))/bins\n    cats = []\n    for i in range(bins):\n        cats.append(min(inp)+leng*(i+1))\n    return np.around(cats,nn)\n\ndef categorize_(inp,bins):\n    out = inp.values\n    bins_ = categorize_cat(inp,bins)\n    zw = np.ones(len(out))*bins_[0]\n    for i in range(len(bins_[:-1])):\n        for j in range(len(zw)):\n            if out[j] > bins_[i]:\n                zw[j]=bins_[i+1]\n    return zw\n\ndef cat_str(inp):\n    zw = pd.Series(inp)\n    zzw = np.sort(zw.unique())\n    cat_dic={}\n    for i in range(1,len(zzw)-1):\n        cat_dic.update({zzw[i] : str(zzw[i])+\"-\"+str(zzw[i+1])})\n    cat_dic.update({zzw[-1] : \"> \"+str(zzw[-1])})\n    cat_dic.update({zzw[0] : \" <\"+str(zzw[0])})\n    return pd.Series(zw),cat_dic\n\ndef pandas_enc(inp,col,bins=5,m_co_var=True):\n    out1 = inp[inp.columns[inp.columns!=col]]\n    zw = inp[col]\n    if pandas_type(inp)!=False:\n        pass\n    else:\n        return None\n    if zw.dtype==float:\n        zw = categorize_(zw,bins)\n        zw,cat_dic = cat_str(zw)\n        out2 = pandas_enc_str(zw,m_co_var)\n        out2 = out2[np.sort(out2.columns)]\n        out2 = out2.rename(columns=cat_dic)\n    elif zw.dtype==int:\n        print(\"Specify: str or float\")\n    elif zw.dtype==\"O\":\n        zw=str(col)+\"_\"+zw\n        out2 = pandas_enc_str(zw,m_co_var)\n    else:\n        print(\"Strange dtype\")\n    return pd.concat([out1,out2], axis=1)\n\ndef pandas_multi_enc(inp,col,bins=5,m_co_var=True):\n    out = inp\n    for i in col:\n        out = pandas_enc(out,str(i))\n    return out",
            "metadata": {
                "trusted": true
            },
            "execution_count": null,
            "outputs": []
        },
        {
            "cell_type": "code",
            "source": "zw = train_x.append(test_x)\nzzw = pandas_multi_enc(zw,['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked'])\n\ntrain_x = zzw.iloc[:len(train_x)].values\ntest_x = zzw.iloc[len(train_x):].values",
            "metadata": {
                "trusted": true
            },
            "execution_count": null,
            "outputs": []
        },
        {
            "cell_type": "code",
            "source": "model=Sequential()\nmodel.add(Dense(512,input_dim=zzw.shape[1],activation='linear'))\nmodel.add(Dense(2048,activation='sigmoid'))\nmodel.add(Dense(512,activation='sigmoid'))\nmodel.add(Dense(16,activation='linear'))\nmodel.add(Dense(1,activation='linear'))\n\n\nsgd=keras.optimizers.SGD(lr=.0001)\nmodel.compile(optimizer=sgd,loss='mse')\n\nres_model = model.fit(train_x,train_y, batch_size=32, epochs=100)",
            "metadata": {
                "trusted": true
            },
            "execution_count": null,
            "outputs": []
        },
        {
            "cell_type": "code",
            "source": "zw = model.predict(test_x)\n\nresult_csv=pd.DataFrame()\n\nresult_csv[\"PassengerId\"]=test.PassengerId\nresult_csv[\"Survived\"]=np.rint(zw).astype(int)",
            "metadata": {
                "trusted": true
            },
            "execution_count": null,
            "outputs": []
        },
        {
            "cell_type": "code",
            "source": "result_csv.to_csv(\"my_titanic_res.csv\",index=False)",
            "metadata": {
                "trusted": true
            },
            "execution_count": null,
            "outputs": []
        }
    ]
}