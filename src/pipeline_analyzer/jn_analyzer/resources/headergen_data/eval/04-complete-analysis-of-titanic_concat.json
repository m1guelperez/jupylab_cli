{
    "source": [
        {
            "content": [
                "# This Python 3 environment comes with many helpful analytics libraries installed",
                "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python",
                "# For example, here's several helpful packages to load",
                "",
                "import numpy as np # linear algebra",
                "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)",
                "",
                "# Input data files are available in the read-only \"../input/\" directory",
                "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory",
                "",
                "import os",
                "for dirname, _, filenames in os.walk('/kaggle/input'):",
                "    for filename in filenames:",
                "        print(os.path.join(dirname, filename))",
                "",
                "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" ",
                "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
            ],
            "content_processed": [
                "SETUP",
                "CHECKPOINT",
                "for dirname, _, filenames in os.walk('path'):",
                "for filename in filenames:",
                "print(print)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "import matplotlib.pyplot as plt ",
                "%matplotlib inline ",
                "import seaborn as sns"
            ],
            "content_processed": [
                "SETUP"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train=pd.read_csv('/kaggle/input/titanic/train.csv')",
                "df_Test=pd.read_csv('/kaggle/input/titanic/test.csv')"
            ],
            "content_processed": [
                "ASSIGN=pd.read_csv('path')",
                "ASSIGN=pd.read_csv('path')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.head()"
            ],
            "content_processed": [
                "df_Train.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test.head()"
            ],
            "content_processed": [
                "df_Test.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.isnull().sum()"
            ],
            "content_processed": [
                "df_Train.isnull().sum()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test.isnull().sum()"
            ],
            "content_processed": [
                "df_Test.isnull().sum()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "def bar_chart(feature):",
                "    survived = df_Train[df_Train['Survived']==1][feature].value_counts()",
                "    dead = df_Train[df_Train['Survived']==0][feature].value_counts()",
                "    df = pd.DataFrame([survived,dead])",
                "    df.index = ['Survived','Dead']",
                "    df.plot(kind='bar',stacked=True, figsize=(10,5))"
            ],
            "content_processed": [
                "def bar_chart(feature):",
                "ASSIGN = df_Train[df_Train['Survived']==1][feature].value_counts()",
                "ASSIGN = df_Train[df_Train['Survived']==0][feature].value_counts()",
                "ASSIGN = pd.DataFrame([survived,dead])",
                "ASSIGN.index = ['Survived','Dead']",
                "ASSIGN.plot(kind='bar',stacked=True, figsize=(10,5))"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Visualization"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "bar_chart('Sex')"
            ],
            "content_processed": [
                "bar_chart('Sex')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Visualization"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "bar_chart('Pclass')"
            ],
            "content_processed": [
                "bar_chart('Pclass')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Visualization"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "bar_chart('Embarked')"
            ],
            "content_processed": [
                "bar_chart('Embarked')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Visualization"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "#Deleting unneccesary columns",
                "df_Train.drop('Name', axis=1, inplace=True)",
                "df_Test.drop('Name', axis=1, inplace=True)"
            ],
            "content_processed": [
                "df_Train.drop('Name', axis=1, inplace=True)",
                "df_Test.drop('Name', axis=1, inplace=True)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering",
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.head()"
            ],
            "content_processed": [
                "df_Train.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test.head()"
            ],
            "content_processed": [
                "df_Test.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.Sex[df_Train.Sex == 'male'] = 1",
                "df_Train.Sex[df_Train.Sex == 'female'] = 2",
                "",
                "df_Test.Sex[df_Test.Sex == 'male'] = 1",
                "df_Test.Sex[df_Test.Sex == 'female'] = 2"
            ],
            "content_processed": [
                "df_Train.Sex[df_Train.Sex == 'male'] = 1",
                "df_Train.Sex[df_Train.Sex == 'female'] = 2",
                "df_Test.Sex[df_Test.Sex == 'male'] = 1",
                "df_Test.Sex[df_Test.Sex == 'female'] = 2"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.Embarked[df_Train.Embarked == 'Q'] = 1",
                "df_Train.Embarked[df_Train.Embarked == 'S'] = 2",
                "df_Train.Embarked[df_Train.Embarked == 'C'] = 3",
                "",
                "df_Test.Embarked[df_Test.Embarked == 'Q'] = 1",
                "df_Test.Embarked[df_Test.Embarked == 'S'] = 2",
                "df_Test.Embarked[df_Test.Embarked == 'C'] = 3"
            ],
            "content_processed": [
                "df_Train.Embarked[df_Train.Embarked == 'Q'] = 1",
                "df_Train.Embarked[df_Train.Embarked == 'S'] = 2",
                "df_Train.Embarked[df_Train.Embarked == 'C'] = 3",
                "df_Test.Embarked[df_Test.Embarked == 'Q'] = 1",
                "df_Test.Embarked[df_Test.Embarked == 'S'] = 2",
                "df_Test.Embarked[df_Test.Embarked == 'C'] = 3"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train['Age']=df_Train['Age'].fillna(df_Train['Age'].mode()[0])",
                "df_Test['Age']=df_Test['Age'].fillna(df_Test['Age'].mode()[0])",
                "",
                "df_Train['Embarked']=df_Train['Embarked'].fillna(df_Train['Embarked'].mode()[0])",
                "df_Test['Fare']=df_Test['Fare'].fillna(df_Test['Fare'].mode()[0])"
            ],
            "content_processed": [
                "df_Train['Age']=df_Train['Age'].fillna(df_Train['Age'].mode()[0])",
                "df_Test['Age']=df_Test['Age'].fillna(df_Test['Age'].mode()[0])",
                "df_Train['Embarked']=df_Train['Embarked'].fillna(df_Train['Embarked'].mode()[0])",
                "df_Test['Fare']=df_Test['Fare'].fillna(df_Test['Fare'].mode()[0])"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering",
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "sns.heatmap(df_Train.isnull(),yticklabels=False,cbar=False)"
            ],
            "content_processed": [
                "sns.heatmap(df_Train.isnull(),yticklabels=False,cbar=False)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Visualization"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "sns.heatmap(df_Test.isnull(),yticklabels=False,cbar=False)"
            ],
            "content_processed": [
                "sns.heatmap(df_Test.isnull(),yticklabels=False,cbar=False)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Visualization"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.drop(['Cabin'],axis=1,inplace=True)",
                "df_Test.drop(['Cabin'],axis=1,inplace=True)",
                "",
                "df_Train.drop(['Ticket'],axis=1,inplace=True)",
                "df_Test.drop(['Ticket'],axis=1,inplace=True)"
            ],
            "content_processed": [
                "df_Train.drop(['Cabin'],axis=1,inplace=True)",
                "df_Test.drop(['Cabin'],axis=1,inplace=True)",
                "df_Train.drop(['Ticket'],axis=1,inplace=True)",
                "df_Test.drop(['Ticket'],axis=1,inplace=True)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering",
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.head()"
            ],
            "content_processed": [
                "df_Train.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test.head()"
            ],
            "content_processed": [
                "df_Test.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.Fare[df_Train.Fare <= 17] = 1",
                "df_Train.Fare[(df_Train.Fare > 17) & (df_Train.Fare <= 30)] = 2",
                "df_Train.Fare[(df_Train.Fare > 30) & (df_Train.Fare <= 100)] = 3",
                "df_Train.Fare[df_Train.Fare > 100] = 4",
                "",
                "df_Test.Fare[df_Test.Fare <= 17] = 1",
                "df_Test.Fare[(df_Test.Fare > 17) & (df_Test.Fare <= 30)] = 2",
                "df_Test.Fare[(df_Test.Fare > 30) & (df_Test.Fare <= 100)] = 3",
                "df_Test.Fare[df_Test.Fare > 100] = 4"
            ],
            "content_processed": [
                "df_Train.Fare[df_Train.Fare <= 17] = 1",
                "df_Train.Fare[(df_Train.Fare > 17) & (df_Train.Fare <= 30)] = 2",
                "df_Train.Fare[(df_Train.Fare > 30) & (df_Train.Fare <= 100)] = 3",
                "df_Train.Fare[df_Train.Fare > 100] = 4",
                "df_Test.Fare[df_Test.Fare <= 17] = 1",
                "df_Test.Fare[(df_Test.Fare > 17) & (df_Test.Fare <= 30)] = 2",
                "df_Test.Fare[(df_Test.Fare > 30) & (df_Test.Fare <= 100)] = 3",
                "df_Test.Fare[df_Test.Fare > 100] = 4"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.Age[df_Train.Age <= 16] = 0",
                "df_Train.Age[(df_Train.Age > 16) & (df_Train.Age <= 26)] = 1",
                "df_Train.Age[(df_Train.Age > 26) & (df_Train.Age <= 36)] = 2",
                "df_Train.Age[(df_Train.Age > 36) & (df_Train.Age <= 62)] = 3",
                "df_Train.Age[df_Train.Age > 62] = 4",
                "",
                "df_Test.Age[df_Test.Age <= 16] = 0",
                "df_Test.Age[(df_Test.Age > 16) & (df_Test.Age <= 26)] = 1",
                "df_Test.Age[(df_Test.Age > 26) & (df_Test.Age <= 36)] = 2",
                "df_Test.Age[(df_Test.Age > 36) & (df_Test.Age <= 62)] = 3",
                "df_Test.Age[df_Test.Age > 62] = 4"
            ],
            "content_processed": [
                "df_Train.Age[df_Train.Age <= 16] = 0",
                "df_Train.Age[(df_Train.Age > 16) & (df_Train.Age <= 26)] = 1",
                "df_Train.Age[(df_Train.Age > 26) & (df_Train.Age <= 36)] = 2",
                "df_Train.Age[(df_Train.Age > 36) & (df_Train.Age <= 62)] = 3",
                "df_Train.Age[df_Train.Age > 62] = 4",
                "df_Test.Age[df_Test.Age <= 16] = 0",
                "df_Test.Age[(df_Test.Age > 16) & (df_Test.Age <= 26)] = 1",
                "df_Test.Age[(df_Test.Age > 26) & (df_Test.Age <= 36)] = 2",
                "df_Test.Age[(df_Test.Age > 36) & (df_Test.Age <= 62)] = 3",
                "df_Test.Age[df_Test.Age > 62] = 4"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.head()"
            ],
            "content_processed": [
                "df_Train.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test.head()"
            ],
            "content_processed": [
                "df_Test.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "X=df_Train[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]",
                "y=df_Train[['Survived']]"
            ],
            "content_processed": [
                "X=df_Train[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]",
                "ASSIGN=df_Train[['Survived']]"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "from sklearn.model_selection import train_test_split",
                "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"
            ],
            "content_processed": [
                "SETUP",
                "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading",
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Train.isnull().sum()"
            ],
            "content_processed": [
                "df_Train.isnull().sum()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test.dtypes"
            ],
            "content_processed": [
                "CHECKPOINT",
                "df_Test.dtypes"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test['Sex'] = df_Test['Sex'].astype(int) ",
                "df_Test['Embarked'] = df_Test['Embarked'].astype(int)",
                "df_Test.dtypes"
            ],
            "content_processed": [
                "CHECKPOINT",
                "df_Test['Sex'] = df_Test['Sex'].astype(int)",
                "df_Test['Embarked'] = df_Test['Embarked'].astype(int)",
                "df_Test.dtypes"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering",
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test.isnull().sum()"
            ],
            "content_processed": [
                "df_Test.isnull().sum()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "df_Test"
            ],
            "content_processed": [
                "CHECKPOINT",
                "df_Test"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "from sklearn.preprocessing import StandardScaler",
                "sc = StandardScaler()",
                "df_Test1 = sc.fit_transform(df_Test)",
                "df_Test1"
            ],
            "content_processed": [
                "CHECKPOINT",
                "SETUP",
                "ASSIGN = StandardScaler()",
                "ASSIGN = sc.fit_transform(df_Test)",
                "df_Test1"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading",
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "X.shape"
            ],
            "content_processed": [
                "CHECKPOINT",
                "X.shape"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# Feature Scaling",
                "from sklearn.preprocessing import StandardScaler",
                "sc = StandardScaler()",
                "X_train = sc.fit_transform(X_train)",
                "X_test = sc.transform(X_test)"
            ],
            "content_processed": [
                "SETUP",
                "ASSIGN = StandardScaler()",
                "ASSIGN = sc.fit_transform(ASSIGN)",
                "ASSIGN = sc.transform(ASSIGN)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading",
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "import keras",
                "from keras.models import Sequential",
                "from keras.layers import Dense",
                "from keras.layers import LeakyReLU,PReLU,ELU",
                "from keras.layers import Dropout"
            ],
            "content_processed": [
                "SETUP"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "classifier = Sequential()",
                "classifier.add(Dense(units = 20, kernel_initializer = 'he_uniform',activation='relu',input_dim = 8))",
                "classifier.add(Dense(units = 10, kernel_initializer = 'he_uniform',activation='relu'))",
                "classifier.add(Dense(units = 15, kernel_initializer = 'he_uniform',activation='relu'))",
                "classifier.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))",
                "",
                "classifier.compile(optimizer = 'Adamax', loss = 'binary_crossentropy', metrics = ['accuracy'])"
            ],
            "content_processed": [
                "ASSIGN = Sequential()",
                "ASSIGN.add(Dense(units = 20, kernel_initializer = 'he_uniform',activation='relu',input_dim = 8))",
                "ASSIGN.add(Dense(units = 10, kernel_initializer = 'he_uniform',activation='relu'))",
                "ASSIGN.add(Dense(units = 15, kernel_initializer = 'he_uniform',activation='relu'))",
                "ASSIGN.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))",
                "ASSIGN.compile(optimizer = 'Adamax', loss = 'binary_crossentropy', metrics = ['accuracy'])"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Model Building and Training"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "model=classifier.fit(X_train, y_train, validation_split=0.350, batch_size = 5, epochs = 100)"
            ],
            "content_processed": [
                "ASSIGN=classifier.fit(X_train, y_train, validation_split=0.350, batch_size = 5, epochs = 100)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Model Building and Training"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "y_pred = classifier.predict(df_Test1)",
                "y_pred = (y_pred > 0.5) #returns values in True / False in a list of lists format",
                "",
                "# Converting True and False values to int",
                "y_pred_int = y_pred.astype(int)",
                "",
                "# Coverting list of list to 1 flat list",
                "y_pred_list = [item for sublist in y_pred_int for item in sublist]",
                "",
                "# Converting the flat list to np array",
                "y_pred1 = np.asarray(y_pred_list , dtype = int)"
            ],
            "content_processed": [
                "ASSIGN = classifier.predict(df_Test1)",
                "ASSIGN = (ASSIGN > 0.5)",
                "ASSIGN = y_pred.astype(int)",
                "ASSIGN = [item for sublist in y_pred_int for item in sublist]",
                "ASSIGN = np.asarray(y_pred_list , dtype = int)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Model Building and Training"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "y_pred1"
            ],
            "content_processed": [
                "CHECKPOINT",
                "y_pred1"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "output = pd.DataFrame({'PassengerId': df_Test.PassengerId, 'Survived': y_pred1})",
                "output.to_csv('my_submission15.csv', index=False)"
            ],
            "content_processed": [
                "ASSIGN = pd.DataFrame({'PassengerId': df_Test.PassengerId, 'Survived': y_pred1})",
                "ASSIGN.to_csv('my_submission15.csv', index=False)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                ""
            ],
            "content_processed": [],
            "tag_pred": [],
            "headergen_tag": [
                ""
            ],
            "correct_tag": []
        }
    ]
}