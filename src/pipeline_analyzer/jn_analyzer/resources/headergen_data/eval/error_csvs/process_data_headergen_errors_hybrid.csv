content,output_type,tag,y_pred
"for i in range(0,len(y_pred)): if y_pred[i] > 0.8: y_pred[i] = 1 else: y_pred[i] = 0",not_existent,0,1
"ASSIGN = pd.DataFrame({'ID': submission['ID'], 'item_cnt_month': y_pred}) ASSIGN.to_csv('submission1.csv', index=False)",not_existent,0,1
"ASSIGN=pd.DataFrame(y_pred) ASSIGN=pd.concat([submission['ID'],pred],axis=1) ASSIGN.columns=['ID','item_cnt_day'] ASSIGN.to_csv('new_submission.csv',index=False)",not_existent,0,1
ASSIGN = 5 ASSIGN = 10 ASSIGN = 10,not_existent,0,1
"ASSIGN = np.zeros((len(test_df))) ASSIGN = np.zeros((len(X_train_std))) ASSIGN = list(StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=10).split(X_train_std, Y)) for i, (train_idx, valid_idx) in enumerate(ASSIGN): ASSIGN = X_train_std[train_idx] ASSIGN = Y.loc[train_idx] ASSIGN = X_train_std[valid_idx] ASSIGN = Y.loc[valid_idx] ASSIGN = build_model() ASSIGN = [ roc_auc_callback(training_data=(ASSIGN, ASSIGN),validation_data=(ASSIGN, ASSIGN)), EarlyStopping(monitor='norm_gini_val', patience=patience, mode='max', verbose=1), ] ASSIGN.fit(ASSIGN, ASSIGN, epochs=n_epochs, batch_size=256, ASSIGN=ASSIGN) ASSIGN = model.predict(x_val_fold) ASSIGN[valid_idx] = ASSIGN.reshape(ASSIGN.shape[0]) ASSIGN = model.predict(X_test_std) ASSIGN += ASSIGN.reshape(ASSIGN.shape[0]) ASSIGN = ASSIGN path",not_existent,1,0
"SETUP ASSIGN=OUTPUT_SIZE ASSIGN=1e-4 def triplet_loss_distance(y_true, y_pred): ASSIGN = K.sigmoid(ASSIGN) ASSIGN = y_pred[..., :OUTPUT_SIZE] ASSIGN = y_pred[..., OUTPUT_SIZE:2*OUTPUT_SIZE] ASSIGN = y_pred[..., 2*OUTPUT_SIZE:] ASSIGN = K.tf.reduce_sum(K.tf.square(K.tf.subtract(anchor,positive)),1) ASSIGN = K.tf.reduce_sum(K.tf.square(K.tf.subtract(anchor,negative)),1) ASSIGN = -K.tf.log(-K.tf.divide((ASSIGN),beta)+1+epsilon) ASSIGN = -K.tf.log(-K.tf.divide((OUTPUT_SIZE-ASSIGN),beta)+1+epsilon) return pos_dist + neg_dist",not_existent,0,1
"ASSIGN = emb_model.predict(x_train, verbose=1) ASSIGN = emb_model.predict(test_df.iloc[:, 1:].values, verbose=1) np.savez('emb.npz', x=ASSIGN, xt=ASSIGN)",not_existent,0,1
"ASSIGN = pd.read_csv('path') ASSIGN['Sec_Name'] = ASSIGN['Name'].astype(str).str.split().str[1] ASSIGN = test[['Pclass', 'Sex', 'Age', 'Embarked', 'Sec_Name']] ASSIGN = ASSIGN.replace('male', 0) ASSIGN = ASSIGN.replace('female', 1) ASSIGN = ASSIGN.replace(np.nan, ASSIGN['Age'].mean()) ASSIGN['Embarked'] = ASSIGN['Embarked'].replace('S',1) ASSIGN['Embarked'] = ASSIGN['Embarked'].replace('C',2) ASSIGN['Embarked'] = ASSIGN['Embarked'].replace('Q',3) ASSIGN['Sec_Name'] = ASSIGN['Sec_Name'].replace('Mr.',1) ASSIGN['Sec_Name'] = ASSIGN['Sec_Name'].replace('Mrs.',2) ASSIGN['Sec_Name'] = ASSIGN['Sec_Name'].replace('Miss.',3) ASSIGN['Sec_Name'] = ASSIGN['Sec_Name'].replace('Master.',4) ASSIGN['Sec_Name'] = pd.to_numeric(ASSIGN['Sec_Name'], errors = 'coerce') ASSIGN['Sec_Name'] = ASSIGN['Sec_Name'].replace(np.nan,0) ASSIGN = np.array(ASSIGN) ASSIGN = model.predict(X_test) ASSIGN = np.where(ASSIGN >= 0.5, 1, 0) ASSIGN = pd.DataFrame() ASSIGN['PassengerId'] = ASSIGN['PassengerId'] ASSIGN['Survived'] = ASSIGN.astype(np.int) ASSIGN.to_csv('submission4.csv', index=False)",not_existent,1,0
"def auc(y_true, y_pred): ASSIGN = tf.metrics.ASSIGN(y_true, y_pred)[1] K.get_session().run(tf.local_variables_initializer()) return auc",not_existent,0,1
try: del df_tst except: pass gc.collect(),not_existent,0,1
"def bar_chart(feature): ASSIGN = df_Train[df_Train['Survived']==1][feature].value_counts() ASSIGN = df_Train[df_Train['Survived']==0][feature].value_counts() ASSIGN = pd.DataFrame([survived,dead]) ASSIGN.index = ['Survived','Dead'] ASSIGN.plot(kind='bar',stacked=True, figsize=(10,5))",not_existent,0,1
"ASSIGN = [ go.Scatter( ASSIGN=df_diff['date'], ASSIGN=df_diff['diff'], ) ] ASSIGN = go.Layout( ASSIGN='Montly Sales Diff' ) ASSIGN = go.Figure(data=plot_data, layout=plot_layout) pyoff.iplot(ASSIGN)",not_existent,0,1
