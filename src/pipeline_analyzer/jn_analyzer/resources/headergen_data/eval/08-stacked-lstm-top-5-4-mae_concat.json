{
    "source": [
        {
            "content": [
                "# This Python 3 environment comes with many helpful analytics libraries installed",
                "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python",
                "# For example, here's several helpful packages to load",
                "",
                "import numpy as np # linear algebra",
                "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)",
                "",
                "# Input data files are available in the read-only \"../input/\" directory",
                "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory",
                "",
                "import os",
                "for dirname, _, filenames in os.walk('/kaggle/input'):",
                "    for filename in filenames:",
                "        print(os.path.join(dirname, filename))",
                "",
                "# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" ",
                "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
            ],
            "content_processed": [
                "SETUP",
                "CHECKPOINT",
                "for dirname, _, filenames in os.walk('path'):",
                "for filename in filenames:",
                "print(print)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "import numpy as np",
                "import pandas as pd "
            ],
            "content_processed": [
                "SETUP"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "sales_data = pd.read_csv('../input/competitive-data-science-predict-future-sales/sales_train.csv')",
                "item_cat = pd.read_csv('../input/competitive-data-science-predict-future-sales/item_categories.csv')",
                "items = pd.read_csv('../input/competitive-data-science-predict-future-sales/items.csv')",
                "shops = pd.read_csv('../input/competitive-data-science-predict-future-sales/shops.csv')",
                "sample_submission = pd.read_csv('../input/competitive-data-science-predict-future-sales/sample_submission.csv')",
                "test_data = pd.read_csv('../input/competitive-data-science-predict-future-sales/test.csv')"
            ],
            "content_processed": [
                "ASSIGN = pd.read_csv('..path')",
                "ASSIGN = pd.read_csv('..path')",
                "ASSIGN = pd.read_csv('..path')",
                "ASSIGN = pd.read_csv('..path')",
                "ASSIGN = pd.read_csv('..path')",
                "ASSIGN = pd.read_csv('..path')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "def basic_eda(df):",
                "",
                "    print(\"----------TOP 5 RECORDS--------\")",
                "    print(df.head(5))",
                "    print(\"----------INFO-----------------\")",
                "    print(df.info())",
                "    print(\"----------Describe-------------\")",
                "    print(df.describe())",
                "    print(\"----------Columns--------------\")",
                "    print(df.columns)",
                "    print(\"----------Data Types-----------\")",
                "    print(df.dtypes)",
                "    print(\"-------Missing Values----------\")",
                "    print(df.isnull().sum())",
                "    print(\"-------NULL values-------------\")",
                "    print(df.isna().sum())",
                "    print(\"-----Shape Of Data-------------\")",
                "    print(df.shape)"
            ],
            "content_processed": [
                "CHECKPOINT",
                "def basic_eda(df):",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)",
                "print(print)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "sales_data['date'] = pd.to_datetime(sales_data['date'],format = '%d.%m.%Y')"
            ],
            "content_processed": [
                "sales_data['date'] = pd.to_datetime(sales_data['date'],format = '%d.%m.%Y')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "dataset = sales_data.pivot_table(index = ['shop_id','item_id'],values = ['item_cnt_day'],columns = ['date_block_num'],fill_value = 0,aggfunc='sum')"
            ],
            "content_processed": [
                "ASSIGN = sales_data.pivot_table(index = ['shop_id','item_id'],values = ['item_cnt_day'],columns = ['date_block_num'],fill_value = 0,aggfunc='sum')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "dataset"
            ],
            "content_processed": [
                "CHECKPOINT",
                "dataset"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "dataset.reset_index(inplace = True)"
            ],
            "content_processed": [
                "dataset.reset_index(inplace = True)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "dataset"
            ],
            "content_processed": [
                "CHECKPOINT",
                "dataset"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# predict",
                "dataset = pd.merge(test_data,dataset,on = ['item_id','shop_id'],how = 'left')"
            ],
            "content_processed": [
                "ASSIGN = pd.merge(test_data,ASSIGN,on = ['item_id','shop_id'],how = 'left')"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "dataset"
            ],
            "content_processed": [
                "CHECKPOINT",
                "dataset"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# lets fill all NaN values with 0",
                "dataset.fillna(0,inplace = True)"
            ],
            "content_processed": [
                "dataset.fillna(0,inplace = True)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "dataset.drop(['shop_id','item_id','ID'],inplace = True, axis = 1)",
                "dataset.head()"
            ],
            "content_processed": [
                "dataset.drop(['shop_id','item_id','ID'],inplace = True, axis = 1)",
                "dataset.head()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering",
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# X we will keep all columns execpt the last one ",
                "X_train = np.expand_dims(dataset.values[:,:-1],axis = 2)",
                "# the last column is our label",
                "y_train = dataset.values[:,-1:]",
                "",
                "# for test we keep all the columns execpt the first one",
                "X_test = np.expand_dims(dataset.values[:,1:],axis = 2)",
                "",
                "# lets have a look on the shape ",
                "print(X_train.shape,y_train.shape,X_test.shape)",
                ""
            ],
            "content_processed": [
                "CHECKPOINT",
                "ASSIGN = np.expand_dims(dataset.values[:,:-1],axis = 2)",
                "ASSIGN = dataset.values[:,-1:]",
                "ASSIGN = np.expand_dims(dataset.values[:,1:],axis = 2)",
                "print(print)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Feature Engineering",
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "from keras.models import Sequential",
                "from keras.layers import LSTM,Dense,Dropout"
            ],
            "content_processed": [
                "SETUP"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Library Loading"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# our defining our model ",
                "my_model = Sequential()",
                "my_model.add(LSTM(units = 64,input_shape = (33,1)))",
                "",
                "my_model.add(Dropout(0.4))",
                "my_model.add(Dense(1))",
                "",
                "my_model.compile(loss = 'mse',optimizer = 'adam', metrics = ['mean_squared_error'])",
                "my_model.summary()"
            ],
            "content_processed": [
                "ASSIGN = Sequential()",
                "ASSIGN.add(LSTM(units = 64,input_shape = (33,1)))",
                "ASSIGN.add(Dropout(0.4))",
                "ASSIGN.add(Dense(1))",
                "ASSIGN.compile(loss = 'mse',optimizer = 'adam', metrics = ['mean_squared_error'])",
                "ASSIGN.summary()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Model Building and Training"
            ],
            "correct_tag": []
        },
        {
            "content": [
                ""
            ],
            "content_processed": [],
            "tag_pred": [],
            "headergen_tag": [
                ""
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# my_model.fit(X_train,y_train,batch_size = 4096,epochs = 10)"
            ],
            "content_processed": [],
            "tag_pred": [],
            "headergen_tag": [
                ""
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# our defining our model ",
                "my_model2 = Sequential()",
                "my_model2.add(LSTM(units = 32,input_shape = (33,1), return_sequences=True))",
                "my_model2.add(LSTM(units = 64, return_sequences=True))",
                "my_model2.add(LSTM(units = 128, return_sequences=True))",
                "my_model2.add(Dropout(0.4))",
                "",
                "my_model2.add(LSTM(units = 128, return_sequences=True))",
                "my_model2.add(LSTM(units = 64, return_sequences=True))",
                "my_model2.add(LSTM(units = 32))",
                "my_model2.add(Dropout(0.4))",
                "",
                "my_model2.add(Dense(1))",
                "",
                "my_model2.compile(loss = 'mse',optimizer = 'adam', metrics = ['mean_squared_error'])",
                "my_model2.summary()"
            ],
            "content_processed": [
                "ASSIGN = Sequential()",
                "ASSIGN.add(LSTM(units = 32,input_shape = (33,1), return_sequences=True))",
                "ASSIGN.add(LSTM(units = 64, return_sequences=True))",
                "ASSIGN.add(LSTM(units = 128, return_sequences=True))",
                "ASSIGN.add(Dropout(0.4))",
                "ASSIGN.add(LSTM(units = 128, return_sequences=True))",
                "ASSIGN.add(LSTM(units = 64, return_sequences=True))",
                "ASSIGN.add(LSTM(units = 32))",
                "ASSIGN.add(Dropout(0.4))",
                "ASSIGN.add(Dense(1))",
                "ASSIGN.compile(loss = 'mse',optimizer = 'adam', metrics = ['mean_squared_error'])",
                "ASSIGN.summary()"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Model Building and Training"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "my_model2.fit(X_train,y_train,batch_size = 4096,epochs = 10)"
            ],
            "content_processed": [
                "my_model2.fit(X_train,y_train,batch_size = 4096,epochs = 10)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Model Building and Training"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# creating submission file ",
                "submission_pfs = my_model2.predict(X_test)",
                "# we will keep every value between 0 and 20",
                "submission_pfs = submission_pfs.clip(0,20)",
                "# creating dataframe with required columns ",
                "submission = pd.DataFrame({'ID':test_data['ID'],'item_cnt_month':submission_pfs.ravel()})",
                "# creating csv file from dataframe",
                "submission.to_csv('sub_pfs2.csv',index = False)"
            ],
            "content_processed": [
                "ASSIGN = my_model2.predict(X_test)",
                "ASSIGN = ASSIGN.clip(0,20)",
                "ASSIGN = pd.DataFrame({'ID':test_data['ID'],'item_cnt_month':submission_pfs.ravel()})",
                "ASSIGN.to_csv('sub_pfs2.csv',index = False)"
            ],
            "tag_pred": [],
            "headergen_tag": [
                "Data Preparation"
            ],
            "correct_tag": []
        },
        {
            "content": [
                "",
                "# regressor = Sequential()",
                "",
                "# regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (33, 1)))",
                "# regressor.add(Dropout(0.2))",
                "",
                "# regressor.add(LSTM(units = 50, return_sequences = True))",
                "# regressor.add(Dropout(0.2))",
                "",
                "# regressor.add(LSTM(units = 50, return_sequences = True))",
                "# regressor.add(Dropout(0.2))",
                "",
                "# regressor.add(LSTM(units = 50))",
                "# regressor.add(Dropout(0.2))",
                "",
                "# regressor.add(Dense(units = 1))",
                "",
                "# regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')",
                "",
                "# regressor.fit(X_train, y_train, epochs = 10, batch_size = 4096)",
                ""
            ],
            "content_processed": [],
            "tag_pred": [],
            "headergen_tag": [
                ""
            ],
            "correct_tag": []
        },
        {
            "content": [
                "# submission_pfss = regressor.predict(X_test)",
                "# # we will keep every value between 0 and 20",
                "# submission_pfss = submission_pfss.clip(0,20)",
                "# # creating dataframe with required columns ",
                "# submission12 = pd.DataFrame({'ID':test_data['ID'],'item_cnt_month':submission_pfss.ravel()})",
                "# # creating csv file from dataframe",
                "# submission12.to_csv('sub_pfs12.csv',index = False)"
            ],
            "content_processed": [],
            "tag_pred": [],
            "headergen_tag": [
                ""
            ],
            "correct_tag": []
        }
    ]
}