content,tag,output_type,original_content,y_pred
df_train['price_doc'].hist(bins=50),1,execute_result,df_train['price_doc'].hist(bins=50),0
"SETUP VALIDATION init_notebook_mode(connected=True) for dirname, _, filenames in os.walk('path'): for filename in filenames: print(os.path.join(dirname, filename))",0,display_data,"    #Importing relevant libraries  import numpy as np   import pandas as pd   import plotly as py  import seaborn as sns  import plotly.express as px  import plotly.graph_objs as go  from plotly.subplots import make_subplots  from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot  init_notebook_mode(connected=True)    ##Importing data into notebook  import os  for dirname, _, filenames in os.walk('/kaggle/input'):      for filename in filenames:          print(os.path.join(dirname, filename))   ",1
"SETUP rcParams['figure.figsize'] = [10,5] warnings.filterwarnings('ignore') pd.set_option('display.max_rows', 50) pd.set_option('display.max_columns', 50) sns.set() sns.set_style('whitegrid')",0,not_existent,"# Load and configure notebook settings import pandas as pd import numpy as np import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec import seaborn as sns import statsmodels.api as sm %matplotlib inline  from matplotlib.pylab import rcParams # For every plotting cell use this rcParams['figure.figsize'] = [10,5]  import warnings warnings.filterwarnings('ignore')  pd.set_option('display.max_rows', 50) pd.set_option('display.max_columns', 50)  sns.set() sns.set_style('whitegrid')",1
"def scatter(dataset, column): plt.figure() plt.scatter(dataset[column] , dataset['weeklySales']) plt.ylabel('weeklySales') plt.xlabel(column)",1,not_existent,"def scatter(dataset, column):      plt.figure()      plt.scatter(dataset[column] , dataset['weeklySales'])      plt.ylabel('weeklySales')      plt.xlabel(column)",0
"ASSIGN = sb.FacetGrid(train, hue=""Survived"", aspect=4) ASSIGN.map(sb.kdeplot, 'FamilySize', shade= True) ASSIGN.set(xlim=(0, train['FamilySize'].max())) ASSIGN.add_legend()",1,execute_result,"facet = sb.FacetGrid(train, hue=""Survived"", aspect=4) facet.map(sb.kdeplot, 'FamilySize', shade= True) facet.set(xlim=(0, train['FamilySize'].max())) facet.add_legend()",0
"SETUP def display_category(urls, category_name): ASSIGN = ""width: 180px; margin: 0px; float: left; border: 1px solid black;"" ASSIGN = ''.join([f""<img style='{img_style}' src='{u}' path>"" for _, u in urls.head(12).iteritems()]) display(HTML(ASSIGN)) ASSIGN = train['landmark_id'].value_counts().keys()[0] ASSIGN = train[train['landmark_id'] == category]['url'] display_category(ASSIGN, """")",1,not_existent,"from IPython.display import Image from IPython.core.display import HTML   def display_category(urls, category_name):     img_style = ""width: 180px; margin: 0px; float: left; border: 1px solid black;""     images_list = ''.join([f""<img style='{img_style}' src='{u}' />"" for _, u in urls.head(12).iteritems()])      display(HTML(images_list))  category = train['landmark_id'].value_counts().keys()[0] urls = train[train['landmark_id'] == category]['url'] display_category(urls, """")      ",0
"ASSIGN = train['landmark_id'].value_counts().keys()[1] ASSIGN = train[train['landmark_id'] == category]['url'] display_category(ASSIGN, """")",1,not_existent,"category = train['landmark_id'].value_counts().keys()[1] urls = train[train['landmark_id'] == category]['url'] display_category(urls, """")",0
"ASSIGN = train['landmark_id'].value_counts().keys()[2] ASSIGN = train[train['landmark_id'] == category]['url'] display_category(ASSIGN, """")",1,not_existent,"category = train['landmark_id'].value_counts().keys()[2] urls = train[train['landmark_id'] == category]['url'] display_category(urls, """")",0
df['v2a1'].hist(),1,not_existent,df['v2a1'].hist(),0
df['v2a1'].loc[-df['idhogar'].isin(hid_wo_heads)].hist(),1,not_existent,df['v2a1'].loc[-df['idhogar'].isin(hid_wo_heads)].hist(),0
df_hwoh['v2a1'].hist(),1,not_existent,df_hwoh['v2a1'].hist(),0
df['escolari'].hist(),1,not_existent,df['escolari'].hist(),0
df['overcrowding'].hist(),1,not_existent,df['overcrowding'].hist(),0
df['Target'].hist(),1,not_existent,df['Target'].hist(),0
"def display_all(df): ''' input: dataframe description: it takes a dataframe and allows use to show a mentioned no. of rows and columns in the screen ''' with pd.option_context(""display.max_rows"",10,""display.max_columns"",9):  #you might want to change these numbers. display(df)",1,not_existent,"def display_all(df):      '''      input: dataframe      description: it takes a dataframe and allows use to show a mentioned no. of rows and columns in the screen      '''      with pd.option_context(""display.max_rows"",10,""display.max_columns"",9):  #you might want to change these numbers.          display(df)",0
SETUP py.init_notebook_mode(connected=True),0,display_data,# Importing the relevant libraries  import IPython.display  import pandas as pd  import seaborn as sns  import plotly.offline as py  py.init_notebook_mode(connected=True)  import plotly.graph_objs as go  from matplotlib import pyplot as plt,1
"ASSIGN = imageio.get_reader('..path') ASSIGN = reader.get_meta_data()['ASSIGN'] ASSIGN = [] try: for im in ASSIGN: ASSIGN.append(im) except RuntimeError: pass ASSIGN.close() ASSIGN = [resize(frame, (256, 256))[..., :3] for frame in ASSIGN] HTML(display(ASSIGN).to_html5_video())",1,execute_result,"reader = imageio.get_reader('../input/digitsinnoise-video/Test.mp4')  fps = reader.get_meta_data()['fps']  driving_video = []  try:      for im in reader:          driving_video.append(im)  except RuntimeError:      pass  reader.close()    driving_video = [resize(frame, (256, 256))[..., :3] for frame in driving_video]        HTML(display(driving_video).to_html5_video())",0
SETUP ASSIGN = Image(filename='path') display(ASSIGN),1,error,from IPython.display import Image   pil_img = Image(filename='/kaggle/input/asl-rgb-depth-fingerspelling-spelling-it-out/dataset5/C/s/color_18_0100.png')    display(pil_img),0
"plotTheLineWithData(X,w)",1,not_existent,"plotTheLineWithData(X,w)",0
SETUP py.init_notebook_mode(connected=True),0,display_data,"import numpy as np # linear algebra  import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)    import plotly.offline as py  py.init_notebook_mode(connected=True)  import plotly.graph_objs as go  import plotly.tools as tls  import seaborn as sns  import matplotlib.image as mpimg  import matplotlib.pyplot as plt  import matplotlib  %matplotlib inline    # Import the 3 dimensionality reduction methods  from sklearn.manifold import TSNE  from sklearn.decomposition import PCA  from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA",1
"ASSIGN = go.Scatter( ASSIGN=list(range(784)), ASSIGN= cum_var_exp, ASSIGN='lines+markers', ASSIGN=""'Cumulative Explained Variance'"", ASSIGN=dict( ASSIGN='spline', ASSIGN = 'goldenrod' ) ) ASSIGN = go.Scatter( ASSIGN=list(range(784)), ASSIGN= var_exp, ASSIGN='lines+markers', ASSIGN=""'Individual Explained Variance'"", ASSIGN=dict( ASSIGN='linear', ASSIGN = 'black' ) ) ASSIGN = tls.make_subplots(insets=[{'cell': (1,1), 'l': 0.7, 'b': 0.5}], ASSIGN=True) ASSIGN.append_trace(ASSIGN, 1, 1) ASSIGN.append_trace(ASSIGN,1,1) ASSIGN.layout.title = 'Explained Variance plots - Full and Zoomed-in' ASSIGN.layout.xaxis = dict(range=[0, 80], title = 'Feature columns') ASSIGN.layout.yaxis = dict(range=[0, 60], title = 'Explained Variance')",1,stream,"trace1 = go.Scatter(      x=list(range(784)),      y= cum_var_exp,      mode='lines+markers',      name=""'Cumulative Explained Variance'"",  #     hoverinfo= cum_var_exp,      line=dict(          shape='spline',          color = 'goldenrod'      )  )  trace2 = go.Scatter(      x=list(range(784)),      y= var_exp,      mode='lines+markers',      name=""'Individual Explained Variance'"",  #     hoverinfo= var_exp,      line=dict(          shape='linear',          color = 'black'      )  )  fig = tls.make_subplots(insets=[{'cell': (1,1), 'l': 0.7, 'b': 0.5}],                            print_grid=True)    fig.append_trace(trace1, 1, 1)  fig.append_trace(trace2,1,1)  fig.layout.title = 'Explained Variance plots - Full and Zoomed-in'  fig.layout.xaxis = dict(range=[0, 80], title = 'Feature columns')  fig.layout.yaxis = dict(range=[0, 60], title = 'Explained Variance')  # fig['data'] = []  # fig['data'].append(go.Scatter(x= list(range(784)) , y=cum_var_exp, xaxis='x2', yaxis='y2', name = 'Cumulative Explained Variance'))  # fig['data'].append(go.Scatter(x= list(range(784)) , y=cum_var_exp, xaxis='x2', yaxis='y2', name = 'Cumulative Explained Variance'))    # fig['data'] = go.Scatter(x= list(range(784)) , y=cum_var_exp, xaxis='x2', yaxis='y2', name = 'Cumulative Explained Variance')]  # fig['data'] += [go.Scatter(x=list(range(784)), y=var_exp, xaxis='x2', yaxis='y2',name = 'Individual Explained Variance')]    # # fig['data'] = data  # # fig['layout'] = layout  # # fig['data'] += data2  # # fig['layout'] += layout2  # py.iplot(fig, filename='inset example')",0
SETUP sns.countplot(Y_train),1,execute_result,import seaborn as sns  %matplotlib inline  sns.countplot(Y_train),0
"VALIDATION for filename in os.listdir(UNKNOWN_FACES_DIR): print(f'Filename {filename}', end='') ASSIGN = face_recognition.load_image_file(f'{UNKNOWN_FACES_DIR}path{filename}') ASSIGN = face_recognition.ASSIGN(unknown_image) ASSIGN = face_recognition.ASSIGN(unknown_image, face_locations) ASSIGN = Image.fromarray(unknown_image) ASSIGN = ImageDraw.Draw(pil_image) for (top, right, bottom, left), face_encoding in zip(ASSIGN, ASSIGN): ASSIGN = face_recognition.compare_faces(known_faces, face_encoding,TOLERANCE) ASSIGN = ""Unknown"" ASSIGN = face_recognition.face_distance(known_faces, face_encoding) ASSIGN = np.argmin(face_distances) if ASSIGN[ASSIGN]: ASSIGN = known_names[best_match_index] ASSIGN.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255)) ASSIGN = draw.textsize(name) ASSIGN.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255)) ASSIGN.text((left + 6, bottom - text_height - 5), ASSIGN, fill=(255, 255, 255, 255)) del draw display(ASSIGN)",1,stream,"for filename in os.listdir(UNKNOWN_FACES_DIR):        # Load image      print(f'Filename {filename}', end='')      unknown_image = face_recognition.load_image_file(f'{UNKNOWN_FACES_DIR}/{filename}')      # Load an image with an unknown face      #unknown_image = face_recognition.load_image_file(""/kaggle/input/virat-kohli-facial-recognition/Virat Kohli Facial Recognition/known_faces/Virat_Kohli/gettyimages-463104486-2048x2048.jpg"")        # Find all the faces and face encodings in the unknown image      face_locations = face_recognition.face_locations(unknown_image)      face_encodings = face_recognition.face_encodings(unknown_image, face_locations)        # Convert the image to a PIL-format image so that we can draw on top of it with the Pillow library      # See http://pillow.readthedocs.io/ for more about PIL/Pillow      pil_image = Image.fromarray(unknown_image)      # Create a Pillow ImageDraw Draw instance to draw with      draw = ImageDraw.Draw(pil_image)        # Loop through each face found in the unknown image      for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):          # See if the face is a match for the known face(s)          matches = face_recognition.compare_faces(known_faces, face_encoding,TOLERANCE)            name = ""Unknown""            # Or instead, use the known face with the smallest distance to the new face          face_distances = face_recognition.face_distance(known_faces, face_encoding)          best_match_index = np.argmin(face_distances)          if matches[best_match_index]:              name = known_names[best_match_index]            # Draw a box around the face using the Pillow module          draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))            # Draw a label with a name below the face          text_width, text_height = draw.textsize(name)          draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))          draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))        # Remove the drawing library from memory as per the Pillow docs      del draw        # Display the resulting image      display(pil_image)",0
"happiness_data.boxplot(column='HappinessScore',by = 'Region', figsize=(30, 15))",1,not_existent,"happiness_data.boxplot(column='HappinessScore',by = 'Region', figsize=(30, 15))",0
"X.boxplot(figsize = (30,25),grid=True,fontsize=25,rot=90)",1,execute_result,"X.boxplot(figsize = (30,25),grid=True,fontsize=25,rot=90)",0
"plt.scatter(shyness_score, friendship_len)",1,execute_result,"plt.scatter(shyness_score, friendship_len)",0
