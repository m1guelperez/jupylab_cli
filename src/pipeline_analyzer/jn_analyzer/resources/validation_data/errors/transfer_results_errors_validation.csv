content,tag,output_type,original_content,y_pred
"VALIDATION ASSIGN = pd.read_csv('path', parse_dates = ['datestamp']) display(ASSIGN.head(5)) print(ASSIGN.dtypes) ASSIGN = pd.to_datetime(ASSIGN) ASSIGN = ASSIGN.set_index('datestamp') display(ASSIGN.isnull().sum())",0,display_data,"# Read in jobs file  jobs = pd.read_csv('/kaggle/input/week6dataset/employment.csv', parse_dates = ['datestamp'])    # Review the first five lines of your DataFrame  display(jobs.head(5))    # Review the type of each column in your DataFrame  print(jobs.dtypes)    # Convert datestamp column to a datetime object  jobs['datestamp'] = pd.to_datetime(jobs['datestamp'])    # Set the datestamp columns as the index of your DataFrame  jobs = jobs.set_index('datestamp')    # Check the number of missing values in each column  display(jobs.isnull().sum())",1
"ASSIGN = pd.read_csv(""..path"", index_col = ""ID"").drop(""MAC_CODE"",axis=1) ASSIGN = np.ones(len(test.index)) ASSIGN = pd.DataFrame(scaler.transform(ASSIGN[train.columns.to_list()]), index=ASSIGN.index, columns=train.columns) ASSIGN = lasso_reg.predict(test[train.columns.to_list()].drop(""TARGET"", axis=1))",0,not_existent,"test = pd.read_csv(""../input/cs-challenge/test_set.csv"", index_col = ""ID"").drop(""MAC_CODE"",axis=1)  test[""TARGET""] = np.ones(len(test.index))  #test[train.columns.to_list()]  test = pd.DataFrame(scaler.transform(test[train.columns.to_list()]), index=test.index, columns=train.columns)  p1 = lasso_reg.predict(test[train.columns.to_list()].drop(""TARGET"", axis=1))",1
"VALIDATION ASSIGN = np.random.choice(np.arange(1, lines), size=lines-1-1000000, replace=False) ASSIGN=np.sort(ASSIGN) print('lines to skip:', len(ASSIGN)) ASSIGN = pd.read_csv(""..path"", skiprows=skiplines)",0,not_existent,"skiplines = np.random.choice(np.arange(1, lines), size=lines-1-1000000, replace=False) skiplines=np.sort(skiplines) print('lines to skip:', len(skiplines))  data = pd.read_csv(""../input/data.csv"", skiprows=skiplines)",1
"ASSIGN = imageio.get_reader('..path') ASSIGN = reader.get_meta_data()['ASSIGN'] ASSIGN = [] try: for im in ASSIGN: ASSIGN.append(im) except RuntimeError: pass ASSIGN.close() ASSIGN = [resize(frame, (256, 256))[..., :3] for frame in ASSIGN] HTML(display(ASSIGN).to_html5_video())",0,execute_result,"reader = imageio.get_reader('../input/digitsinnoise-video/Test.mp4')  fps = reader.get_meta_data()['fps']  driving_video = []  try:      for im in reader:          driving_video.append(im)  except RuntimeError:      pass  reader.close()    driving_video = [resize(frame, (256, 256))[..., :3] for frame in driving_video]        HTML(display(driving_video).to_html5_video())",1
"SETUP ASSIGN="".path"" os.mkdir(ASSIGN) for dirname, _, filenames in os.walk('..path'): for filename in filenames: ASSIGN = ""..path""+filename ASSIGN = test_set+os.path.splitext(filename)[0]+"".wav"" ASSIGN = AudioSegment.from_mp3(src) ASSIGN = ASSIGN.set_frame_rate(8000) ASSIGN.export(ASSIGN, format=""wav"")",1,not_existent,"import os  from os import path from pydub import AudioSegment      test_set=""./test_set/""    os.mkdir(test_set)     for dirname, _, filenames in os.walk('../input/quran-asr-challenge/test_set'):     for filename in filenames:         # files                                                                                  src = ""../input/quran-asr-challenge/test_set/""+filename         dst = test_set+os.path.splitext(filename)[0]+"".wav""         # convert wav to mp3                                                                     sound = AudioSegment.from_mp3(src)         sound = sound.set_frame_rate(8000)         sound.export(dst, format=""wav"") ",0
"plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)",1,execute_result,"plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)",0
"ASSIGN = {} ASSIGN = [] ASSIGN['people'].append({ 'name': 'Scott', 'website': 'stackabuse.com', 'from': 'Nebraska' }) ASSIGN['people'].append({ 'name': 'Larry', 'website': 'google.com', 'from': 'Michigan' }) ASSIGN['people'].append({ 'name': 'Tim', 'website': 'apple.com', 'from': 'Alabama' }) with open('ASSIGN.json', 'w') as outfile: json.dump(ASSIGN, outfile)",1,not_existent,"  data = {} data['people'] = [] data['people'].append({     'name': 'Scott',     'website': 'stackabuse.com',     'from': 'Nebraska' }) data['people'].append({     'name': 'Larry',     'website': 'google.com',     'from': 'Michigan' }) data['people'].append({     'name': 'Tim',     'website': 'apple.com',     'from': 'Alabama' })  with open('data.json', 'w') as outfile:     json.dump(data, outfile)",0
"ASSIGN = { ""title"": dataset_name, ""id"": os.environ['KAGGLE_USERNAME']+""path""+dataset_name, ""licenses"": [ { ""name"": ""CC0-1.0"" } ] } with open('dataset-metadata.json', 'w') as outfile: json.dump(ASSIGN, outfile)",1,not_existent,"data = {   ""title"": dataset_name,   ""id"": os.environ['KAGGLE_USERNAME']+""/""+dataset_name,   ""licenses"": [     {       ""name"": ""CC0-1.0""     }   ] }   with open('dataset-metadata.json', 'w') as outfile:     json.dump(data, outfile)",0
"VALIDATION for filename in glob.glob(os.path.join(directory_a, '*.png')): ASSIGN =cv2.imread(filename,0) print(ASSIGN.shape)",0,error,"for filename in glob.glob(os.path.join(directory_a, '*.png')):      im1 =cv2.imread(filename,0)      print(im1.shape)",1
"SETUP ASSIGN = 'path' ASSIGN = 'path' ASSIGN = [] ASSIGN = [] for filename in glob.glob(os.path.join(ASSIGN, '*.png')): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN = giveMeFeatures(im1) ASSIGN.append(ASSIGN) ASSIGN.append(0) for filename in glob.glob(os.path.join(ASSIGN, '*.png')): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN = giveMeFeatures(im1) ASSIGN.append(ASSIGN) ASSIGN.append(1) ASSIGN = np.array(np.float32(ASSIGN)) ASSIGN = np.array(np.float32(ASSIGN)) ASSIGN = np.random.RandomState(321) ASSIGN = rand.permutation(len(X)) ASSIGN = ASSIGN[shuffle] ASSIGN = ASSIGN[shuffle]",0,not_existent,"import glob  import cv2  directory_a = '/kaggle/input/asl-rgb-depth-fingerspelling-spelling-it-out/dataset5/A/a'  directory_b = '/kaggle/input/asl-rgb-depth-fingerspelling-spelling-it-out/dataset5/A/b'    X = []  y = []    for filename in glob.glob(os.path.join(directory_a, '*.png')):      im1 =cv2.imread(filename,0)      im1 = cv2.resize(im1,(64,64))      features = giveMeFeatures(im1)      X.append(features)      y.append(0)    for filename in glob.glob(os.path.join(directory_b, '*.png')):      im1 =cv2.imread(filename,0)      im1 = cv2.resize(im1,(64,64))      features = giveMeFeatures(im1)      X.append(features)      y.append(1)        X = np.array(np.float32(X))  y = np.array(np.float32(y))      rand = np.random.RandomState(321)  shuffle = rand.permutation(len(X))  X = X[shuffle]  y = y[shuffle]             ",1
"SETUP VALIDATION ASSIGN = 'path' ASSIGN = 'path' ASSIGN = 'path' ASSIGN = 'path' ASSIGN = [] ASSIGN = [] ASSIGN.append(ASSIGN) ASSIGN.append(ASSIGN) ASSIGN.append(ASSIGN) ASSIGN.append(ASSIGN) ASSIGN = [] ASSIGN = [] ASSIGN = ['*.png', '*.jpg'] ASSIGN=0 ASSIGN=0 for typ in ASSIGN: for directory in ASSIGN: for filename in glob.glob(os.path.join(directory, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(28,28)) ASSIGN.append(ASSIGN) ASSIGN.append([1,0]) ASSIGN+=1 for directory in ASSIGN: for filename in glob.glob(os.path.join(directory, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(28,28)) ASSIGN.append(ASSIGN) ASSIGN.append([0,1]) ASSIGN+=1 print('A: ', ASSIGN) print('B: ', ASSIGN)",0,stream,"import glob  import cv2  directory_a = '/kaggle/input/asl-rgb-depth-fingerspelling-spelling-it-out/dataset5/A/a'  directory_b = '/kaggle/input/asl-rgb-depth-fingerspelling-spelling-it-out/dataset5/A/b'  directory_5 = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/5'  directory_s = '/kaggle/input/asl-rgb-depth-fingerspelling-spelling-it-out/dataset5/A/s'    ADirectories = []  BDirectories = []    ADirectories.append(directory_a)  ADirectories.append(directory_s)  BDirectories.append(directory_b)  BDirectories.append(directory_5)      X = []  y = []  types = ['*.png', '*.jpg']  countA=0  countB=0  for typ in types:      for directory in ADirectories:          for filename in glob.glob(os.path.join(directory, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(28,28))              X.append(im1)              y.append([1,0])              countA+=1      for directory in BDirectories:          for filename in glob.glob(os.path.join(directory, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(28,28))              X.append(im1)              y.append([0,1])              countB+=1  print('A: ', countA)  print('B: ', countB) ",1
"SETUP ASSIGN = 'path' ASSIGN = 'path' ASSIGN = 'path' ASSIGN = [] ASSIGN = [] ASSIGN = ['*.png', '*.jpg'] for typ in ASSIGN: for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(0) for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(1) for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(2)",0,not_existent,"import glob  import cv2  directory_5 = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/5'  directory_2 = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/2'  directory_unk = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/unknown'          X = []  y = []  types = ['*.png', '*.jpg']  for typ in types:          for filename in glob.glob(os.path.join(directory_2, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(0)          for filename in glob.glob(os.path.join(directory_5, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(1)          for filename in glob.glob(os.path.join(directory_unk, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(2)                 ",1
"SETUP ASSIGN = 'path' ASSIGN = 'path' ASSIGN = 'path' ASSIGN = [] ASSIGN = [] ASSIGN = ['*.png', '*.jpg'] for typ in ASSIGN: for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(0) for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(1) for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(2)",0,not_existent,"import glob  import cv2  directory_1 = '/kaggle/input/3shapesdataset/resized/1'  directory_2 = '/kaggle/input/3shapesdataset/resized/2'  directory_3 = '/kaggle/input/3shapesdataset/resized/3'  #directory_unk = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/unknown'          X = []  y = []  types = ['*.png', '*.jpg']  for typ in types:          for filename in glob.glob(os.path.join(directory_1, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(0)          for filename in glob.glob(os.path.join(directory_2, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(1)          for filename in glob.glob(os.path.join(directory_3, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(2)  #         for filename in glob.glob(os.path.join(directory_unk, typ)):  #             im1 =cv2.imread(filename,0)  #             im1 = cv2.resize(im1,(64,64))  #             X.append(im1)  #             y.append(3)                               ",1
"SETUP VALIDATION ASSIGN = 'path' ASSIGN = 'path' ASSIGN = 'path' ASSIGN = 'path' ASSIGN = [] ASSIGN = [] ASSIGN = ['*.png', '*.jpg'] for typ in ASSIGN: for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(0) print('finished') for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(1) print('finished') for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(2) print('finished') for filename in glob.glob(os.path.join(ASSIGN, typ)): ASSIGN =cv2.imread(filename,0) ASSIGN = cv2.resize(ASSIGN,(64,64)) ASSIGN.append(ASSIGN) ASSIGN.append(3) print('finished')",0,stream,"import glob  import cv2  directory_1 = '/kaggle/input/3shapesdatasetunk/All Data/1'  directory_2 = '/kaggle/input/3shapesdatasetunk/All Data/2'  directory_3 = '/kaggle/input/3shapesdatasetunk/All Data/3'  # directory_4 = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/4'  # directory_5 = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/5'  directory_unk = '/kaggle/input/3shapesdatasetunk/All Data/unknown'  #directory_unk = '/kaggle/input/sign-language-for-numbers/Sign Language for Numbers/unknown'          X = []  y = []  types = ['*.png', '*.jpg']  for typ in types:          for filename in glob.glob(os.path.join(directory_1, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(0)          print('finished')          for filename in glob.glob(os.path.join(directory_2, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(1)          print('finished')          for filename in glob.glob(os.path.join(directory_3, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(2)          print('finished')          for filename in glob.glob(os.path.join(directory_unk, typ)):              im1 =cv2.imread(filename,0)              im1 = cv2.resize(im1,(64,64))              X.append(im1)              y.append(3)          print('finished')                               ",1
"SETUP os.environ[""PATH""] += os.pathsep + 'D:path(x86)path' ASSIGN = export_graphviz( DecisionTree, out_file=None, ASSIGN=X.columns, class_names=[Level1_equidistant,Level2_equidistant, Level3_equidistant,Level4_equidistant,Level5_equidistant,Level6_equidistant], ASSIGN=True, rounded=True, proportion=True ) graphviz.Source(ASSIGN)",1,execute_result,"os.environ[""PATH""] += os.pathsep + 'D:/Program Files (x86)/Graphviz2.38/bin/'  # Export decision tree  dot_data = export_graphviz(      DecisionTree, out_file=None,      feature_names=X.columns, class_names=[Level1_equidistant,Level2_equidistant, Level3_equidistant,Level4_equidistant,Level5_equidistant,Level6_equidistant],      filled=True, rounded=True, proportion=True     )  import graphviz    # Display decision tree  graphviz.Source(dot_data)",0
