content,tag,output_type,original_content,y_pred
"ASSIGN = pd.melt(test_df[[""Id"", ""age"", ""domain1_var1"", ""domain1_var2"", ""domain2_var1"", ""domain2_var2""]], id_vars=[""Id""], value_name=""Predicted"") ASSIGN[""Id""] = ASSIGN[""Id""].astype(""str"") + ""_"" + ASSIGN[""variable""].astype(""str"") ASSIGN = ASSIGN.drop(""variable"", axis=1).sort_values(""Id"") assert ASSIGN.shape[0] == test_df.shape[0]*5 ASSIGN.to_csv(""submission1.csv"", index=False)",1,not_existent,"sub_df = pd.melt(test_df[[""Id"", ""age"", ""domain1_var1"", ""domain1_var2"", ""domain2_var1"", ""domain2_var2""]], id_vars=[""Id""], value_name=""Predicted"") sub_df[""Id""] = sub_df[""Id""].astype(""str"") + ""_"" +  sub_df[""variable""].astype(""str"")  sub_df = sub_df.drop(""variable"", axis=1).sort_values(""Id"") assert sub_df.shape[0] == test_df.shape[0]*5  sub_df.to_csv(""submission1.csv"", index=False)",0
"ASSIGN = {'undamaged': 0, 'repair': 1, 'replace': 2} data['operation_rank'] = data['operation'].apply(lambda x: ASSIGN[x]) def mae_single_point(urr_score, operation_rank, repair_threshold, replace_threshold): ASSIGN = int(urr_score > repair_threshold) + int(urr_score > replace_threshold) return abs(ASSIGN - operation_rank) assert(mae_single_point(0.9, 0, 0.4, 0.7) == 2) assert(mae_single_point(0.5, 1, 0.4, 0.7) == 0) assert(mae_single_point(0.5, 2, 0.4, 0.7) == 1)",1,not_existent,"operation_ranks = {'undamaged': 0,                     'repair': 1,                     'replace': 2}    data['operation_rank'] = data['operation'].apply(lambda x: operation_ranks[x])    def mae_single_point(urr_score, operation_rank, repair_threshold, replace_threshold):      classified_outcome_rank = int(urr_score > repair_threshold) + int(urr_score > replace_threshold)        return abs(classified_outcome_rank - operation_rank)    assert(mae_single_point(0.9, 0, 0.4, 0.7) == 2)  assert(mae_single_point(0.5, 1, 0.4, 0.7) == 0)  assert(mae_single_point(0.5, 2, 0.4, 0.7) == 1)      ",0
